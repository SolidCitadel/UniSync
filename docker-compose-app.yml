# Docker Compose for Full Application Stack (Integration Testing)
# Usage: docker-compose -f docker-compose-app.yml up

services:
  # ==========================================
  # Infrastructure Services
  # ==========================================

  # LocalStack - AWS 서비스 로컬 에뮬레이션
  localstack:
    image: localstack/localstack-pro
    container_name: unisync-localstack
    ports:
      - "4566:4566"
      - "4510-4559:4510-4559"
    environment:
      - SERVICES=sqs,stepfunctions,lambda,s3,secretsmanager,events,cognito-idp,elasticloadbalancingv2,ec2
      - DEBUG=1
      - PERSISTENCE=1
      - DOCKER_HOST=unix:///var/run/docker.sock
      - LAMBDA_EXECUTOR=docker-reuse
      - LAMBDA_RUNTIME_ENVIRONMENT_TIMEOUT=30
      - LOCALSTACK_AUTH_TOKEN=${LOCALSTACK_AUTH_TOKEN}
    volumes:
      - "./localstack-init:/etc/localstack/init/ready.d"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "localstack-data:/var/lib/localstack"
      - ".:/workspace"  # Project root for writing .env file
    networks:
      - unisync-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MySQL - 각 서비스별 데이터베이스
  mysql:
    image: mysql:8.0
    container_name: unisync-mysql
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_USER=unisync
      - MYSQL_PASSWORD=unisync_password
      - TZ=Asia/Seoul
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    networks:
      - unisync-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot_password"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==========================================
  # Application Services
  # ==========================================

  # User Service - 사용자/인증/소셜 기능
  user-service:
    build:
      context: ./app/backend/user-service
      dockerfile: Dockerfile
    container_name: unisync-user-service
    ports:
      - "8081:8081"
    environment:
      # MySQL Configuration
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - USER_SERVICE_DB_NAME=user_db
      - USER_SERVICE_DB_USER=unisync
      - USER_SERVICE_DB_PASSWORD=unisync_password

      # AWS Cognito Configuration (LocalStack)
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
      - COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}
      - COGNITO_REGION=ap-northeast-2
      - COGNITO_ENDPOINT=http://localstack:4566

      # Spring Profile
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      mysql:
        condition: service_healthy
      localstack:
        condition: service_healthy
    networks:
      - unisync-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # API Gateway - 통합 게이트웨이
  api-gateway:
    build:
      context: ./app/backend/api-gateway
      dockerfile: Dockerfile
    container_name: unisync-api-gateway
    ports:
      - "8080:8080"
    environment:
      # Service URLs (Docker internal network)
      - USER_SERVICE_URL=http://user-service:8081
      - COURSE_SERVICE_URL=http://course-service:8082
      - SCHEDULE_SERVICE_URL=http://schedule-service:8083

      # AWS Cognito Configuration (LocalStack)
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
      - COGNITO_REGION=ap-northeast-2
      - COGNITO_ENDPOINT=http://localstack:4566

      # Spring Profile
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      user-service:
        condition: service_healthy
      localstack:
        condition: service_healthy
    networks:
      - unisync-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ==========================================
  # Future Services (Not Yet Implemented)
  # ==========================================
  # Uncomment when ready to add:

  # course-service:
  #   build:
  #     context: ./app/backend/course-service
  #     dockerfile: Dockerfile
  #   container_name: unisync-course-service
  #   ports:
  #     - "8082:8082"
  #   environment:
  #     - MYSQL_HOST=mysql
  #     - MYSQL_PORT=3306
  #     - COURSE_SERVICE_DB_NAME=course_db
  #     - COURSE_SERVICE_DB_USER=unisync
  #     - COURSE_SERVICE_DB_PASSWORD=unisync_password
  #     - SPRING_PROFILES_ACTIVE=docker
  #   depends_on:
  #     mysql:
  #       condition: service_healthy
  #   networks:
  #     - unisync-network

  # schedule-service:
  #   build:
  #     context: ./app/backend/schedule-service
  #     dockerfile: Dockerfile
  #   container_name: unisync-schedule-service
  #   ports:
  #     - "8083:8083"
  #   environment:
  #     - MYSQL_HOST=mysql
  #     - MYSQL_PORT=3306
  #     - SCHEDULE_SERVICE_DB_NAME=schedule_db
  #     - SCHEDULE_SERVICE_DB_USER=unisync
  #     - SCHEDULE_SERVICE_DB_PASSWORD=unisync_password
  #     - SPRING_PROFILES_ACTIVE=docker
  #   depends_on:
  #     mysql:
  #       condition: service_healthy
  #   networks:
  #     - unisync-network

volumes:
  mysql-data:
    driver: local
  localstack-data:
    driver: local

networks:
  unisync-network:
    driver: bridge